
架构设计理念：
开发sdk时，不需要每次都校验参数的合法性，明确对外暴露的API，
如果外部调用不合法，一定要让程序挂掉，而不是不回应，这样方便上层更好的排查问题；
尤其是调用频次较高的底层sdk，性能和调用反馈是需要特别重视的；


设计原则
1.找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要变化的代码混在一起
2.针对接口编程，而不是针对实现编程
3.多用组合，少用继承
4.为了交互对象之间的松耦合设计而努力
5.类应该对扩展开发，对修改关闭
6.要依赖抽象，不要依赖具体类
7.最少知识原则：只和你的密友谈话
8.别调用我们，我们会调用你
9.一个类应该只有一个引起变化的原因


分层简化逻辑，单一原则，各层之间通过约定的接口/协议进行合作；


线程池：
	corePoolSize:该线程池中核心线程的数量
	maximumPoolSize:该线程池中最大线程数量
	keepAliveTime:非核心线程空闲时，等待下一个任务到来的时间
	unit:上面时间属性单位
	workQueue:任务队列
	threadFactory:线程工厂，设置线程名字等，一般无须设置
	

AES加密
RSA加密
启动流程*
图片压缩
蓝牙通信

设计模式
组件化
插件化
视频压缩

14:16:9E:4B:64:69

OkHttp原理
	addAll  interceptor
	retryAndFollowUp
	Bridge
	Cache
	Connect
	CallServer


Retrofit原理
RxJava原理

ButterKnife


task和action是gradle的重要元素。


