消息循环机制：

应用启动时，创建的UI线程(activityThread)中 main函数 调用了Looper.loop()；
故，主线程中消息队列已经在循环中。
ThreadLocal对象，可以在一个线程中存储变量

android通过Looper、Handler来实现消息循环机制。android的消息循环是针对线程的，每个线程都有自己的消息队列和消息循环。

android系统中Looper负责管理线程的消息队列和消息循环。
通过looper.myLooper()得到当前线程的Looper对象，
looper.getMainLooper()得到当前进程的主线程的Looper对象。


Looper创建MessageQueue，进入无限循环体，不断从MessageQueue中读取消息。
与当前线程绑定，保证一个线程只有一个Looper实例，一个Looper实例只有一个MQ;

*******
在Looper的构造方法中，创建了MessagQueue;
prepare方法中，创建Looper对象，将其保存在ThreadLocal中；
loop()方法，从MQ中获取消息，执行msg.target.dispatchMessage(msg);target即Handler;dispatchMessage中会调用handleMessage;
Looper.myLooper(); 获取当前线程保存的Looper实例（Looper是怎么跟线程绑定的？）
循环结束时，应调用Looper.quit();(主线程中的Looper.quit是在Application退出时调用的)
********

执行loop()方法之前，必须先执行prepare();
Looper对象在prepare中初始化，在loop中获取。如果不执行prepare，直接执行loop，则获取不到looper对象，抛出异常；
Handler负责创建消息。
Looper创建MQ对象，执行loop()方法，获取MQ中的消息，将消息传给msg.tartget.dispatchMessage();
dispatchMessage()方法中调用handleMeeage()。完成消息传递



//消息机制流程总结
应用启动时，创建UI线程，执行main方法，调用Looper.prepare/Looper.loop；
在loop中执行无限循环，获取消息队列中的消息，调用msg.target.dipatch(msg)，
将消息传递出去；
prepare中新建Looper对象，将其保存在ThreadLocal中；
Looper的构造方法中创建MessageQueue消息队列的实例；

Handler的构造方法中，通过Looper.myLooper获取当前线程的looper实例，
通过looper实例获取到消息队列对象；
Handler中sendmessage方法最终执行sendMessageAtTime();
通过MQ的enqueueMessage方法将消息及Handler实例加入消息队列

